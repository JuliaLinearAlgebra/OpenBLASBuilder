using BinaryProvider

# This is where all binaries will get installed
const prefix = Prefix(!isempty(ARGS) ? ARGS[1] : joinpath(@__DIR__,"usr"))

cblas_h = FileProduct(joinpath(prefix, "include", "cblas.h"))
openblas_config_h = FileProduct(joinpath(prefix, "include", "openblas_config.h"))
libopenblas = LibraryProduct(libdir(prefix), ["libopenblas", "libopenblas64_"])

# Assign products to `products`:
products = [libopenblas]


# Download binaries from hosted location
bin_prefix = "https://github.com/staticfloat/OpenBLASBuilder/releases/download/v0.2.20-6"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    BinaryProvider.Linux(:aarch64, :glibc) => ("$bin_prefix/OpenBLASBuilder.aarch64-linux-gnu.tar.gz", "8eea65fec4dd3acd94f81df12c2aa4b7c9693c3b7775319e71d83228241a6a78"),
    BinaryProvider.Linux(:armv7l, :glibc) => ("$bin_prefix/OpenBLASBuilder.arm-linux-gnueabihf.tar.gz", "b7601bda261eb2f2ccd855206758ca027a6a7ecfb8a0d06d7f7a668512364a43"),
    BinaryProvider.Linux(:i686, :glibc) => ("$bin_prefix/OpenBLASBuilder.i686-linux-gnu.tar.gz", "9db76ddadb5fd20063514646c1a3ff7f7eb2844b718d379c1aa2785512c29cf2"),
    BinaryProvider.Windows(:i686) => ("$bin_prefix/OpenBLASBuilder.i686-w64-mingw32.tar.gz", "e0d1935d33eb5eb1c7c5e8a41572683d75c114142b0543671123e9b318b5f07a"),
    BinaryProvider.Linux(:powerpc64le, :glibc) => ("$bin_prefix/OpenBLASBuilder.powerpc64le-linux-gnu.tar.gz", "1558be4ed12dd991b6a06a1899a5dbf7c5c6a79446724dc9a8402deef45e0cd9"),
    BinaryProvider.MacOS() => ("$bin_prefix/OpenBLASBuilder.x86_64-apple-darwin14.tar.gz", "380af0306ccc5075d0879a4f656426a429699c368bb7130114df5dd314c4f6eb"),
    BinaryProvider.Linux(:x86_64, :glibc) => ("$bin_prefix/OpenBLASBuilder.x86_64-linux-gnu.tar.gz", "d0811d3e038742d7a4d333c3a576ee03960b8040dd5e974ec5ca5a63083f10d7"),
    BinaryProvider.Windows(:x86_64) => ("$bin_prefix/OpenBLASBuilder.x86_64-w64-mingw32.tar.gz", "b57c2f28a1bc5579d650b33cb84691e3cf7d7ac5d1afbaec3485658dbe4c55dc"),
)
if platform_key() in keys(download_info)
    # First, check to see if we're all satisfied
    if any(!satisfied(p; verbose=true) for p in products)
        # Download and install binaries
        url, tarball_hash = download_info[platform_key()]
        install(url, tarball_hash; prefix=prefix, force=true, verbose=true)
    end

    # Finally, write out a deps.jl file that will contain mappings for each
    # named product here: (there will be a "libfoo" variable and a "fooifier"
    # variable, etc...)
    @write_deps_file libopenblas cblas_h openblas_config_h
else
    error("Your platform $(Sys.MACHINE) is not supported by this package!")
end
